crypto.Certificate()
crypto.certificate.exportChallenge(spkac)
crypto.certificate.exportPublicKey(spkac)
crypto.certificate.verifySpkac(spkac)
crypto.cipher.final([output_encoding])
crypto.cipher.setAAD(buffer)
crypto.cipher.getAuthTag()
crypto.cipher.setAutoPadding(auto_padding=true)
crypto.cipher.update(data[, input_encoding][, output_encoding])
crypto.decipher.final([output_encoding])
crypto.decipher.setAAD(buffer)
crypto.decipher.setAuthTag(buffer)
crypto.decipher.setAutoPadding(auto_padding=true)
crypto.decipher.update(data[, input_encoding][, output_encoding])
crypto.diffieHellman.computeSecret(other_public_key[, input_encoding][, output_encoding])
crypto.diffieHellman.generateKeys([encoding])
crypto.diffieHellman.getGenerator([encoding])
crypto.diffieHellman.getPrime([encoding])
crypto.diffieHellman.getPrivateKey([encoding])
crypto.diffieHellman.getPublicKey([encoding])
crypto.diffieHellman.setPrivateKey(private_key[, encoding])
crypto.diffieHellman.setPublicKey(public_key[, encoding])
crypto.diffieHellman.verifyError
crypto.ecdh.computeSecret(other_public_key[, input_encoding][, output_encoding])
crypto.ecdh.generateKeys([encoding[, format]])
crypto.ecdh.getPrivateKey([encoding])
crypto.ecdh.getPublicKey([encoding[, format]])
crypto.ecdh.setPrivateKey(private_key[, encoding])
crypto.ecdh.setPublicKey(public_key[, encoding])
crypto.hash.digest([encoding])
crypto.hash.update(data[, input_encoding])
crypto.hmac.digest([encoding])
crypto.hmac.update(data[, input_encoding])
crypto.sign.sign(private_key[, output_format])
crypto.sign.update(data[, input_encoding])
crypto.verifier.update(data[, input_encoding])
crypto.verifier.verify(object, signature[, signature_format])
crypto module methods and properties
crypto.constants
crypto.DEFAULT_ENCODING
crypto.fips
crypto.createCipher(algorithm, password)
crypto.createCipheriv(algorithm, key, iv)
crypto.createCredentials(details)
crypto.createDecipher(algorithm, password)
crypto.createDecipheriv(algorithm, key, iv)
crypto.createDiffieHellman(prime[, prime_encoding][, generator][, generator_encoding])
crypto.createDiffieHellman(prime_length[, generator])
crypto.createECDH(curve_name)
crypto.createHash(algorithm)
crypto.createHmac(algorithm, key)
crypto.createSign(algorithm)
crypto.createVerify(algorithm)
crypto.getCiphers()
crypto.getCurves()
crypto.getDiffieHellman(group_name)
crypto.getHashes()
crypto.pbkdf2(password, salt, iterations, keylen, digest, callback)
crypto.pbkdf2Sync(password, salt, iterations, keylen, digest)
crypto.privateDecrypt(private_key, buffer)
crypto.privateEncrypt(private_key, buffer)
crypto.publicDecrypt(public_key, buffer)
crypto.publicEncrypt(public_key, buffer)
crypto.randomBytes(size[, callback])
crypto.setEngine(engine[, flags])
crypto.timingSafeEqual(a, b)
