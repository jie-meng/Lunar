_G
_VERSION
assert(v [, message])
collectgarbage([opt [, arg]])
coroutine.create(f)
coroutine.isyieldable()
coroutine.resume(co [, val1, ...])
coroutine.running()
coroutine.status(co)
coroutine.wrap(f)
coroutine.yield(...)
debug.debug()
debug.gethook([thread])
debug.getinfo([thread,] f [, what])
debug.getlocal([thread,] f, local)
debug.getmetatable(value)
debug.getregistry()
debug.getupvalue(f, up)
debug.getuservalue(u)
debug.sethook([thread,] hook, mask [, count])
debug.setlocal([thread,] level, local, value)
debug.setmetatable(value, table)
debug.setupvalue(f, up, value)
debug.setuservalue(udata, value)
debug.traceback([thread,] [message [, level]])
debug.upvalueid(f, n)
debug.upvaluejoin(f1, n1, f2, n2)
dofile([filename])
error(message [, level])
getmetatable(object)
io.close([file])
io.flush()
io.input([file])
io.lines([filename, ...])
io.open(filename [, mode]) -> LuaObject (file)
io.output([file])
io.popen(prog [, mode])
io.read(...)
io.tmpfile()
io.type(obj)
io.write(...)
io.fileobj.close()
io.fileobj.flush()
io.fileobj.lines(...)
io.fileobj.read(...)
io.fileobj.seek([whence [, offset]])
io.fileobj.setvbuf(mode [, size])
io.fileobj.write(...)
ipairs(t)
load(chunk [, chunkname [, mode [, env]]])
loadfile([filename [, mode [, env]]])
math.abs(x)
math.acos(x)
math.asin(x)
math.atan(y [, x])
math.ceil(x)
math.cos(x)
math.deg(x)
math.exp(x)
math.floor(x)
math.fmod(x, y)
math.huge
math.log(x [, base])
math.max(x, ...)
math.maxinteger
math.min(x, ...)
math.mininteger
math.modf(x)
math.pi
math.rad(x)
math.random([m [, n]])
math.randomseed(x)
math.sin(x)
math.sqrt(x)
math.tan(x)
math.tointeger(x)
math.type(x)
math.ult(m, n)
next(table [, index])
os.clock()
os.date([format [, time]])
os.difftime(t2, t1)
os.execute([command])
os.exit([code [, close]])
os.getenv(varname)
os.remove(filename)
os.rename(oldname, newname)
os.setlocale(locale [, category])
os.time([table])
os.tmpname()
package.config
package.cpath
package.loaded
package.loadlib(libname, funcname)
package.path
package.preload
package.searchers
package.searchpath(name, path [, sep [, rep]])
pairs(t)
pcall(f [, arg1, ...])
print(...)
rawequal(v1, v2)
rawget(table, index)
rawlen(v)
rawset(table, index, value)
require(modname)
select(index, ...)
setmetatable(table, metatable)
string.byte(s [, i [, j]])
string.char(...)
string.dump(function [, strip])
string.find(s, pattern [, init [, plain]])
string.format(formatstring, ...)
string.gmatch(s, pattern)
string.gsub(s, pattern, repl [, n])
string.len(s)
string.lower(s)
string.match(s, pattern [, init])
string.pack(fmt, v1, v2, ...)
string.packsize(fmt)
string.rep(s, n [, sep])
string.reverse(s)
string.sub(s, i [, j])
string.unpack(fmt, s [, pos])
string.upper(s)
table.concat(list [, sep [, i [, j]]])
table.insert(list, [pos,] value)
table.move(a1, f, e, t [,a2])
table.pack(...)
table.remove(list [, pos])
table.sort(list [, comp])
table.unpack(list [, i [, j]])
tonumber(e [, base])
tostring(v)
type(v)
utf8.char(...)
utf8.charpattern
utf8.codepoint(s [, i [, j]])
utf8.codes(s)
utf8.len(s [, i [, j]])
utf8.offset(s, n [, i])
xpcall(f, msgh [, arg1, ...])
